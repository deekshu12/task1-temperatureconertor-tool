package deekshitha;
import java.util.Scanner;

public class tictactoe {
    private static final int SIZE = 3;
    private static final char EMPTY = ' ';
    private static final char PLAYER_X = 'X';
    private static final char PLAYER_O = 'O';

    private char[][] board;
    private char currentPlayer;

    public tictactoe() {
        board = new char[SIZE][SIZE];
        currentPlayer = PLAYER_X;
        initializeBoard();
    }

    private void initializeBoard() {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                board[row][col] = EMPTY;
            }
        }
    }

    private void printBoard() {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                System.out.print(board[row][col]);
                if (col < SIZE - 1) {
                    System.out.print(" | ");
                }
            }
            System.out.println();
            if (row < SIZE - 1) {
                System.out.println("---------");
            }
        }
    }

    private void play() {
        Scanner scanner = new Scanner(System.in);
        boolean gameFinished = false;

        System.out.println("Tic-Tac-Toe");
        System.out.println("Enter row and column numbers (0-2) to make a move.");

        while (!gameFinished) {
            System.out.println("\nCurrent Board:");
            printBoard();

            System.out.println("\nPlayer " + currentPlayer + "'s turn.");
            System.out.print("Enter the row number: ");
            int row = scanner.nextInt();
            System.out.print("Enter the column number: ");
            int col = scanner.nextInt();

            if (isValidMove(row, col)) {
                makeMove(row, col);

                if (isWinningMove(row, col)) {
                    System.out.println("\nPlayer " + currentPlayer + " wins!");
                    gameFinished = true;
                } else if (isBoardFull()) {
                    System.out.println("\nThe game is a draw!");
                    gameFinished = true;
                } else {
                    switchPlayer();
                }
            } else {
                System.out.println("\nInvalid move. Please try again.");
            }
        }

        scanner.close();
    }

    private boolean isValidMove(int row, int col) {
        return row >= 0 && row < SIZE && col >= 0 && col < SIZE && board[row][col] == EMPTY;
    }

    private void makeMove(int row, int col) {
        board[row][col] = currentPlayer;
    }

    private boolean isWinningMove(int row, int col) {
     
        if (board[row][0] == currentPlayer && board[row][1] == currentPlayer && board[row][2] == currentPlayer) {
            return true;
        }
  
        if (board[0][col] == currentPlayer && board[1][col] == currentPlayer && board[2][col] == currentPlayer) {
            return true;
        }
       
        if ((board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) ||
                (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer)) {
            return true;
        }
        return false;
    }

    private boolean isBoardFull() {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                if (board[row][col] == EMPTY) {
                    return false;
                }
            }
        }
        return true;
    }

    private void switchPlayer() {
        currentPlayer = (currentPlayer == PLAYER_X) ? PLAYER_O : PLAYER_X;
    }

    public static void main(String[] args) {
    	tictactoe game = new tictactoe();
        game.play();
    }
}
